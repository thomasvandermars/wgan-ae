import os
import tensorflow as tf
import matplotlib.pyplot as plt

def preprocess(path, input_shape):
    """
    Read and decode image data & normalize [-1 ~ 1]
    :param path: full path to image file
    :param input_shape: image dimensions (height, width, color_channels).
    
    :return image: resized and normalized image data
    """
    
    # read image
    image = tf.io.read_file(path)
    
    # decode image data
    image = tf.io.decode_image(image, 
                               expand_animations = False, 
                               channels = input_shape[2],
                               dtype = tf.float32) # NOTE: decoded image is normalized to [0,1]
    
    # resize image
    image = tf.image.resize(image, [input_shape[0], input_shape[1]])
    
    # normalize image data [-1, 1]
    image = tf.subtract(tf.multiply(tf.divide(tf.subtract(image, 0.0), 1.0), 2.0), 1.0)

    return image
	
def config_data_input_pipeline(input_shape = (64, 64, 3), batch_size = 64, data_dir = "data"):
    """
    Configuring data input pipeline
    :param tuple input_shape: image dimensions (height, width, color_channels).
    :param int batch_size: batch size. Defaults to 64.
    :param str data_dir: relative path to image folder. Defaults to "data".
    
    :return tf.Dataset: dataset
    """

    # generate list of full image pathnames
    filenames = [os.getcwd() + '/' + data_dir + '/' + x for x in os.listdir(os.getcwd() + '/' + data_dir)]
    
    # transform list to tf.Dataset
    ds = tf.data.Dataset.from_tensor_slices(filenames)
    
    # establish buffer size
    buffer_size = len(ds)
    
    # configure pipeline
    ds = (ds.cache() # store in memory
            .shuffle(buffer_size = buffer_size) # shuffle
            .map(lambda x: preprocess(path = x, input_shape = input_shape), 
                 num_parallel_calls = tf.data.AUTOTUNE) # read-in images and annotations
            .batch(batch_size) # batch
            .prefetch(buffer_size = tf.data.AUTOTUNE))
    
    # generate a sample to inspect the input generated by the pipeline
    for img_batch in ds.take(1):
        print('image batch shape: ' + str(img_batch.numpy().shape))
        for i in range(16):
            plt.subplot(4, 4, i+1)
            plt.imshow((img_batch[i,] * 127.5 + 127.5)/255.)
            plt.axis('off')
        pass
    plt.suptitle('Sample of pipeline output', fontsize = 10)
    plt.show()
    
    return ds